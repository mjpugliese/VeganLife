{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    SCREEN_WIDTH = _Dimensions$get.width,\n    SCREEN_HEIGHT = _Dimensions$get.height;\n\nexport { SCREEN_WIDTH, SCREEN_HEIGHT };\nvar wscale = SCREEN_WIDTH / 375;\nvar hscale = SCREEN_HEIGHT / 667;\nexport default function normalize(size) {\n  var based = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'width';\n  var newSize = based === 'height' ? size * hscale : size * wscale;\n\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\n  }\n}","map":{"version":3,"sources":["/home/equipo/Escritorio/VeganLife/front/node_modules/react-native-normalize/src/index.ts"],"names":["Dimensions","get","SCREEN_WIDTH","width","SCREEN_HEIGHT","height","wscale","hscale","normalize","size","based","newSize","Platform","OS","Math","round","PixelRatio","roundToNearestPixel"],"mappings":";;;;sBAE4DA,UAAU,CAACC,GAAX,CAC1D,QAD0D,C;IAAxCC,Y,mBAAPC,K;IAA6BC,a,mBAARC,M;;;AAKlC,IAAMC,MAAc,GAAGJ,YAAY,GAAG,GAAtC;AACA,IAAMK,MAAc,GAAGH,aAAa,GAAG,GAAvC;AAEA,eAAe,SAASI,SAAT,CACbC,IADa,EAGb;AAAA,MADAC,KACA,uEAD4B,OAC5B;AACA,MAAMC,OAAO,GAAGD,KAAK,KAAK,QAAV,GAAqBD,IAAI,GAAGF,MAA5B,GAAqCE,IAAI,GAAGH,MAA5D;;AACA,MAAIM,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzB,WAAOC,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BN,OAA/B,CAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAOG,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACC,mBAAX,CAA+BN,OAA/B,CAAX,IAAsD,CAA7D;AACD;AACF","sourcesContent":["import { Dimensions, Platform, PixelRatio } from 'react-native';\n\nexport var { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get(\n  'window',\n);\n\n// based on iPhone 8's scale\nconst wscale: number = SCREEN_WIDTH / 375;\nconst hscale: number = SCREEN_HEIGHT / 667;\n\nexport default function normalize(\n  size: number,\n  based: 'width' | 'height' = 'width',\n) {\n  const newSize = based === 'height' ? size * hscale : size * wscale;\n  if (Platform.OS === 'ios') {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize));\n  } else {\n    return Math.round(PixelRatio.roundToNearestPixel(newSize)) - 2;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}